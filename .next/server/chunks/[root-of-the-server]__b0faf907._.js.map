{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/bin/bulk/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n\n// Reuse the same logic from single lookup\nasync function lookupSingleBin(bin: string): Promise<any> {\n  try {\n    // Validate BIN\n    if (!/^\\d{6,8}$/.test(bin)) {\n      return { bin, error: \"Invalid BIN format\" };\n    }\n\n    const response = await fetch(`https://lookup.binlist.net/${bin}`, {\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'CyberBIN/1.0'\n      }\n    });\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        return { bin, error: \"BIN not found\" };\n      }\n      throw new Error(`API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    // Calculate fraud risk\n    const fraudRiskScore = calculateFraudRisk(bin, data.country?.name, data.bank?.name);\n    const secureSupport = checkSecureSupport(bin, data.scheme);\n    \n    return {\n      bin,\n      issuingBank: data.bank?.name || \"Unknown\",\n      cardType: data.type ? data.type.charAt(0).toUpperCase() + data.type.slice(1) : \"Unknown\",\n      country: data.country?.name || \"Unknown\",\n      countryCode: data.country?.alpha2 || \"XX\",\n      cardBrand: data.scheme ? data.scheme.toUpperCase() : \"Unknown\",\n      currency: data.country?.currency || \"Unknown\",\n      fraudRiskScore,\n      riskLevel: fraudRiskScore >= 70 ? \"HIGH\" : fraudRiskScore >= 40 ? \"MEDIUM\" : \"LOW\",\n      secureSupport,\n      prepaid: data.prepaid || false,\n      status: \"success\"\n    };\n    \n  } catch (error: any) {\n    console.error(`Error looking up BIN ${bin}:`, error);\n    return { \n      bin, \n      error: error.message.includes(\"fetch\") ? \"Network error\" : \"Lookup failed\",\n      status: \"error\"\n    };\n  }\n}\n\nfunction calculateFraudRisk(bin: string, country?: string, bank?: string): number {\n  let riskScore = 0;\n  \n  const firstDigit = parseInt(bin[0]);\n  const secondDigit = parseInt(bin[1]);\n  \n  // BIN pattern analysis\n  if (firstDigit === 4 && secondDigit >= 0 && secondDigit <= 2) riskScore += 20;\n  if (firstDigit === 5 && secondDigit >= 5) riskScore += 15;\n  if (firstDigit === 3) riskScore += 25;\n  \n  // Country risk assessment\n  const highRiskCountries = ['Unknown', 'Russia', 'China', 'Nigeria', 'Iran'];\n  if (country && highRiskCountries.includes(country)) riskScore += 30;\n  \n  // Bank verification\n  if (bank === 'Unknown' || !bank) riskScore += 20;\n  \n  // Add controlled randomness\n  riskScore += Math.floor(Math.random() * 15);\n  \n  return Math.min(riskScore, 100);\n}\n\nfunction checkSecureSupport(bin: string, scheme?: string): string {\n  const firstDigit = parseInt(bin[0]);\n  \n  if (scheme === 'visa' && firstDigit === 4) {\n    return bin.length >= 16 ? '3D Secure Supported' : '2D Secure Only';\n  }\n  if (scheme === 'mastercard' && firstDigit === 5) {\n    return '3D Secure Supported';\n  }\n  if (scheme === 'amex' && firstDigit === 3) {\n    return '2D Secure Only';\n  }\n  \n  return bin.length >= 16 ? '3D Secure Supported' : 'Not Supported';\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    let bins: string[] = [];\n\n    // Handle different input formats\n    if (body.bins && Array.isArray(body.bins)) {\n      bins = body.bins;\n    } else if (body.binText && typeof body.binText === 'string') {\n      // Parse text input (newline or comma separated)\n      bins = body.binText\n        .split(/[\\n,\\r\\n]+/)\n        .map((bin: string) => bin.trim())\n        .filter((bin: string) => bin.length > 0);\n    } else {\n      return NextResponse.json({ \n        error: \"Invalid request format. Provide 'bins' array or 'binText' string.\" \n      }, { status: 400 });\n    }\n\n    // Validate input\n    if (bins.length === 0) {\n      return NextResponse.json({ \n        error: \"No valid BINs provided\" \n      }, { status: 400 });\n    }\n\n    if (bins.length > 100) {\n      return NextResponse.json({ \n        error: \"Maximum 100 BINs allowed per request\" \n      }, { status: 400 });\n    }\n\n    // Remove duplicates\n    const uniqueBins = [...new Set(bins)];\n    \n    console.log(`[BULK LOOKUP] Processing ${uniqueBins.length} BINs - ${new Date().toISOString()}`);\n\n    // Process BINs concurrently with controlled concurrency\n    const batchSize = 10; // Process 10 at a time to avoid rate limiting\n    const results: any[] = [];\n    \n    for (let i = 0; i < uniqueBins.length; i += batchSize) {\n      const batch = uniqueBins.slice(i, i + batchSize);\n      const batchPromises = batch.map(bin => lookupSingleBin(bin));\n      const batchResults = await Promise.all(batchPromises);\n      results.push(...batchResults);\n      \n      // Small delay between batches to be respectful to the API\n      if (i + batchSize < uniqueBins.length) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n    }\n\n    // Generate statistics\n    const stats = generateBulkStats(results);\n    \n    // Log completion\n    console.log(`[BULK LOOKUP] Completed ${results.length} lookups - Success: ${stats.successCount}, Errors: ${stats.errorCount}`);\n\n    return NextResponse.json({\n      results,\n      statistics: stats,\n      timestamp: new Date().toISOString(),\n      totalProcessed: results.length\n    });\n\n  } catch (error: any) {\n    console.error(\"Bulk lookup error:\", error);\n    return NextResponse.json({ \n      error: \"Failed to process bulk lookup request\" \n    }, { status: 500 });\n  }\n}\n\nfunction generateBulkStats(results: any[]) {\n  const successResults = results.filter(r => r.status === 'success');\n  const errorResults = results.filter(r => r.status === 'error');\n  \n  // Country distribution\n  const countryStats: { [key: string]: number } = {};\n  const cardTypeStats: { [key: string]: number } = {};\n  const riskStats = { HIGH: 0, MEDIUM: 0, LOW: 0 };\n  const brandStats: { [key: string]: number } = {};\n  \n  successResults.forEach(result => {\n    // Country stats\n    const country = result.country || 'Unknown';\n    countryStats[country] = (countryStats[country] || 0) + 1;\n    \n    // Card type stats\n    const cardType = result.cardType || 'Unknown';\n    cardTypeStats[cardType] = (cardTypeStats[cardType] || 0) + 1;\n    \n    // Risk level stats\n    if (result.riskLevel) {\n      riskStats[result.riskLevel as keyof typeof riskStats]++;\n    }\n    \n    // Brand stats\n    const brand = result.cardBrand || 'Unknown';\n    brandStats[brand] = (brandStats[brand] || 0) + 1;\n  });\n\n  // Calculate average fraud risk\n  const avgFraudRisk = successResults.length > 0 \n    ? successResults.reduce((sum, r) => sum + (r.fraudRiskScore || 0), 0) / successResults.length \n    : 0;\n\n  return {\n    successCount: successResults.length,\n    errorCount: errorResults.length,\n    totalCount: results.length,\n    averageFraudRisk: Math.round(avgFraudRisk * 100) / 100,\n    countryDistribution: Object.entries(countryStats)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 10), // Top 10 countries\n    cardTypeDistribution: cardTypeStats,\n    riskDistribution: riskStats,\n    brandDistribution: brandStats,\n    secureSupport: {\n      supported3D: successResults.filter(r => r.secureSupport?.includes('3D')).length,\n      supported2D: successResults.filter(r => r.secureSupport?.includes('2D')).length,\n      notSupported: successResults.filter(r => r.secureSupport?.includes('Not')).length\n    }\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}